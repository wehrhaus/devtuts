(function () {
    'use strict';

    const five = require('johnny-five');
    const keypress = require('keypress');
    const opts = {};
    const board = new five.Board(opts);

    let toggleRotation;
    let handleKeypress;
    let wheels;
    let forwardKeypress = 'up';
    let reverseKeypress = 'down';
    let leftKeypress = 'left';
    let rightKeypress = 'right';
    let keyPressed = false;

    keypress(process.stdin);
    opts.port = process.argv[2] || '';

    process.on('exit', (code) => {
        wheels.stop();
        console.log('Exiting with code:', code);
    });

    process.stdin.resume();
    process.stdin.setEncoding('utf-8');
    process.stdin.setRawMode(true);

    board.on('ready', () => {

        wheels = require('./Wheels.js')(five);

        process.stdin.on('keypress', (ch, key) => {

            if (!key || keyPressed) return;

            const removeDualCall = setTimeout(() => {
                keyPressed = false;
                clearTimeout(removeDualCall);
            }, 25);
            keyPressed = true;
            handleKeypress(key);

        });

    });

    toggleRotation = () => {
        if (forwardKeypress === 'up') {
            forwardKeypress = 'down';
            reverseKeypress = 'up';
            leftKeypress = 'right';
            rightKeypress = 'left';
        } else {
            forwardKeypress = 'up';
            reverseKeypress = 'down';
            leftKeypress = 'left';
            rightKeypress = 'right';
        }
    };

    handleKeypress = (key) => {
        if (key.name === 's') {
            toggleRotation();
        } else if (key.name === 'q') {
            wheels.reset();
            process.exit();
        } else if (key.name === forwardKeypress) {
            wheels.forward();
        } else if (key.name === reverseKeypress) {
            wheels.reverse();
        } else if (key.name === leftKeypress && !key.shift) {
            wheels.softLeft();
        } else if (key.name === leftKeypress && key.shift) {
            wheels.spinLeft();
        } else if (key.name === rightKeypress && !key.shift) {
            wheels.softRight();
        } else if (key.name === rightKeypress && key.shift) {
            wheels.spinRight();
        } else if (key.name === 'space') {
            wheels.reset();
        }
    };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9qd2Vocm1hbi9TaXRlcy9XZWhySGF1cy9kZXZ0dXRzL0lvVC9qYXZhc2NyaXB0LXJvYm90aWNzL3NyYy9zaW1wbGVib3Qva2V5cHJlc3NUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIHN0cmljdCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZpdmUgPSByZXF1aXJlKCdqb2hubnktZml2ZScpO1xuY29uc3Qga2V5cHJlc3MgPSByZXF1aXJlKCdrZXlwcmVzcycpO1xuY29uc3Qgb3B0cyA9IHt9O1xuY29uc3QgYm9hcmQgPSBuZXcgZml2ZS5Cb2FyZChvcHRzKTtcblxubGV0IHRvZ2dsZVJvdGF0aW9uO1xubGV0IGhhbmRsZUtleXByZXNzO1xubGV0IHdoZWVscztcbmxldCBmb3J3YXJkS2V5cHJlc3MgPSAndXAnO1xubGV0IHJldmVyc2VLZXlwcmVzcyA9ICdkb3duJztcbmxldCBsZWZ0S2V5cHJlc3MgPSAnbGVmdCc7XG5sZXQgcmlnaHRLZXlwcmVzcyA9ICdyaWdodCc7XG5sZXQga2V5UHJlc3NlZCA9IGZhbHNlO1xuXG5rZXlwcmVzcyhwcm9jZXNzLnN0ZGluKTtcbm9wdHMucG9ydCA9IHByb2Nlc3MuYXJndlsyXSB8fCAnJztcblxucHJvY2Vzcy5vbignZXhpdCcsIChjb2RlKSA9PiB7XG4gICAgd2hlZWxzLnN0b3AoKTtcbiAgICBjb25zb2xlLmxvZygnRXhpdGluZyB3aXRoIGNvZGU6JywgY29kZSk7XG59KTtcblxucHJvY2Vzcy5zdGRpbi5yZXN1bWUoKTtcbnByb2Nlc3Muc3RkaW4uc2V0RW5jb2RpbmcoJ3V0Zi04Jyk7XG5wcm9jZXNzLnN0ZGluLnNldFJhd01vZGUodHJ1ZSk7XG5cbmJvYXJkLm9uKCdyZWFkeScsICgpID0+IHtcblxuICAgIHdoZWVscyA9IHJlcXVpcmUoJy4vV2hlZWxzLmpzJykoZml2ZSk7XG5cbiAgICBwcm9jZXNzLnN0ZGluLm9uKCdrZXlwcmVzcycsIChjaCwga2V5KSA9PiB7XG5cbiAgICAgICAgaWYgKCFrZXkgfHwga2V5UHJlc3NlZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHJlbW92ZUR1YWxDYWxsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBrZXlQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlRHVhbENhbGwpO1xuICAgICAgICB9LCAyNSk7XG4gICAgICAgIGtleVByZXNzZWQgPSB0cnVlO1xuICAgICAgICBoYW5kbGVLZXlwcmVzcyhrZXkpO1xuXG4gICAgfSk7XG5cbn0pO1xuXG50b2dnbGVSb3RhdGlvbiA9ICgpID0+IHtcbiAgICBpZiAoZm9yd2FyZEtleXByZXNzID09PSAndXAnKSB7XG4gICAgICAgIGZvcndhcmRLZXlwcmVzcyA9ICdkb3duJztcbiAgICAgICAgcmV2ZXJzZUtleXByZXNzID0gJ3VwJztcbiAgICAgICAgbGVmdEtleXByZXNzID0gJ3JpZ2h0JztcbiAgICAgICAgcmlnaHRLZXlwcmVzcyA9ICdsZWZ0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3J3YXJkS2V5cHJlc3MgPSAndXAnO1xuICAgICAgICByZXZlcnNlS2V5cHJlc3MgPSAnZG93bic7XG4gICAgICAgIGxlZnRLZXlwcmVzcyA9ICdsZWZ0JztcbiAgICAgICAgcmlnaHRLZXlwcmVzcyA9ICdyaWdodCc7XG4gICAgfVxufTtcblxuaGFuZGxlS2V5cHJlc3MgPSAoa2V5KSA9PiB7XG4gICAgaWYgKGtleS5uYW1lID09PSAncycpIHtcbiAgICAgICAgdG9nZ2xlUm90YXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKGtleS5uYW1lID09PSAncScpIHtcbiAgICAgICAgd2hlZWxzLnJlc2V0KCk7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgpO1xuICAgIH0gZWxzZSBpZiAoa2V5Lm5hbWUgPT09IGZvcndhcmRLZXlwcmVzcykge1xuICAgICAgICB3aGVlbHMuZm9yd2FyZCgpO1xuICAgIH0gZWxzZSBpZiAoa2V5Lm5hbWUgPT09IHJldmVyc2VLZXlwcmVzcykge1xuICAgICAgICB3aGVlbHMucmV2ZXJzZSgpO1xuICAgIH0gZWxzZSBpZiAoa2V5Lm5hbWUgPT09IGxlZnRLZXlwcmVzcyAmJiAha2V5LnNoaWZ0KSB7XG4gICAgICAgIHdoZWVscy5zb2Z0TGVmdCgpO1xuICAgIH0gZWxzZSBpZiAoa2V5Lm5hbWUgPT09IGxlZnRLZXlwcmVzcyAmJiBrZXkuc2hpZnQpIHtcbiAgICAgICAgd2hlZWxzLnNwaW5MZWZ0KCk7XG4gICAgfSBlbHNlIGlmIChrZXkubmFtZSA9PT0gcmlnaHRLZXlwcmVzcyAmJiAha2V5LnNoaWZ0KSB7XG4gICAgICAgIHdoZWVscy5zb2Z0UmlnaHQoKTtcbiAgICB9IGVsc2UgaWYgKGtleS5uYW1lID09PSByaWdodEtleXByZXNzICYmIGtleS5zaGlmdCkge1xuICAgICAgICB3aGVlbHMuc3BpblJpZ2h0KCk7XG4gICAgfSBlbHNlIGlmIChrZXkubmFtZSA9PT0gJ3NwYWNlJykge1xuICAgICAgICB3aGVlbHMucmVzZXQoKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUlBLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQyxJQUFBLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyQyxJQUFBLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNoQixJQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFbkMsSUFBQSxJQUFJLGNBQWMsQ0FBQztBQUNuQixJQUFBLElBQUksY0FBYyxDQUFDO0FBQ25CLElBQUEsSUFBSSxNQUFNLENBQUM7QUFDWCxJQUFBLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQztBQUMzQixJQUFBLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQztBQUM3QixJQUFBLElBQUks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